/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package org.openyolo;

option java_package = "org.openyolo.protocol";
option java_outer_classname = "Protobufs";

message CredentialRetrieveRequest {
    ClientVersion client_version = 1;

    // at least one authMethod required
    repeated AuthenticationMethod auth_methods = 2;

    map<string, TokenRequestInfo> supported_token_providers = 3;
    bool require_user_mediation = 4;
    map<string, bytes> additional_props = 5;
}

message CredentialRetrieveBbqResponse {
    bytes retrieveIntent = 1;
    map<string, bytes> additionalProps = 2;
}

message CredentialRetrieveBbqResponseList {
    repeated CredentialRetrieveBbqResponse responses = 1;
}

message CredentialRetrieveResult {
    enum ResultCode {
        UNSPECIFIED = 0;
        BAD_REQUEST = 1;
        CREDENTIAL_SELECTED = 2;
        NO_CREDENTIALS_AVAILABLE = 3;
        USER_REQUESTS_MANUAL_AUTH = 4;
        USER_CANCELED = 5;
    }

    // required
    ResultCode result_code = 1;

    Credential credential = 2;
    map<string, bytes> additional_props = 3;
}

message HintRetrieveRequest {
    ClientVersion client_version = 1;

    // at least one authMethod required
    repeated AuthenticationMethod auth_methods = 2;

    PasswordSpecification password_spec = 3;
    map<string, TokenRequestInfo> supported_token_providers = 4;
    map<string, bytes> additional_props = 5;
}

message HintRetrieveResult {
    enum ResultCode {
        UNSPECIFIED = 0;
        BAD_REQUEST = 1;
        HINT_SELECTED = 2;
        NO_HINTS_AVAILABLE = 3;
        USER_REQUESTS_MANUAL_AUTH = 4;
        USER_CANCELED = 5;
    }

    // required
    ResultCode result_code = 1;

    Hint hint = 2;
    map<string, bytes> additional_props = 3;
}

message CredentialSaveRequest {
    ClientVersion client_version = 1;

    // required
    Credential credential = 2;

    map<string, bytes> additional_props = 3;
}

message CredentialSaveResult {

    enum ResultCode {
        UNSPECIFIED = 0;
        BAD_REQUEST = 1;
        SAVED = 2;
        PROVIDER_REFUSED = 3;
        USER_CANCELED = 4;
        USER_REFUSED = 5;
    }

    // required
    ResultCode result_code = 1;

    map<string, bytes> additional_props = 2;
}

message CredentialDeleteRequest {
    ClientVersion client_version = 1;

    // required
    Credential credential = 2;

    map<string, bytes> additional_props = 3;
}

message CredentialDeleteResult {
    enum ResultCode {
        UNSPECIFIED = 0;
        BAD_REQUEST = 1;
        DELETED = 2;
        NO_MATCHING_CREDENTIAL = 3;
        PROVIDER_REFUSED = 4;
        USER_CANCELED = 5;
        USER_REFUSED = 6;
    }

    // required
    ResultCode result_code = 1;

    map<string, bytes> additional_props = 2;
}

message Credential {
    // required
    string id = 1;

    // required
    AuthenticationDomain auth_domain = 2;

    // required
    AuthenticationMethod auth_method = 3;

    string display_name = 4;
    string display_picture_uri = 5;
    string password = 6;
    string id_token = 7;
    map<string, bytes> additional_props = 8;
}

message Hint {
    // required
    string id = 1;

    // required
    AuthenticationMethod auth_method = 3;

    string display_name = 4;
    string display_picture_uri = 5;
    string generated_password = 6;
    string id_token = 7;
    map<string, bytes> additional_props = 8;
}

message AuthenticationMethod {
    // required
    string uri = 1;
}

message AuthenticationDomain {
    // required
    string uri = 1;
}

message PasswordSpecification {
    // required
    string allowed = 1;

    // required
    uint32 min_size = 2;

    // required
    uint32 max_size = 3;

    repeated RequiredCharSet required_sets = 4;
}

message RequiredCharSet {
    // required
    string chars = 1;

    // required
    uint32 count = 2;
}

message TokenRequestInfo {
    string client_id = 1;
    string nonce = 2;
    map<string, bytes> additional_props = 3;
}

message ClientVersion {
    // required
    string vendor = 1;

    // required
    uint32 major = 2;

    // required
    uint32 minor = 3;

    // required
    uint32 patch = 4;
}